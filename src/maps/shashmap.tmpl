/*:*
 *: File: ./src/maps/shashmap.tmpl
 *: 
 *: yChat; Homepage: www.yChat.org; Version 0.8.3-CURRENT
 *: 
 *: Copyright (C) 2003 Paul C. Buetow, Volker Richter
 *: Copyright (C) 2004 Paul C. Buetow
 *: Copyright (C) 2005 EXA Digital Solutions GbR
 *: 
 *: This program is free software; you can redistribute it and/or
 *: modify it under the terms of the GNU General Public License
 *: as published by the Free Software Foundation; either version 2
 *: of the License, or (at your option) any later version.
 *: 
 *: This program is distributed in the hope that it will be useful,
 *: but WITHOUT ANY WARRANTY; without even the implied warranty of
 *: MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *: GNU General Public License for more details.
 *: 
 *: You should have received a copy of the GNU General Public License
 *: along with this program; if not, write to the Free Software
 *: Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *:*/

template<class obj_type, class key_type_, class hash_type, class alloc_type>
shashmap<obj_type, key_type_, hash_type, alloc_type>::shashmap()
{
  pthread_mutex_init( &mut_shashmap, NULL );
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
shashmap<obj_type, key_type_, hash_type, alloc_type>::~shashmap()
{
  pthread_mutex_destroy( &mut_shashmap );
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
void
shashmap<obj_type, key_type_, hash_type, alloc_type>::add_elem(obj_type t_obj, key_type_ t_key)
{
  pthread_mutex_lock( &mut_shashmap );
  (*this)[t_key] = t_obj;
  pthread_mutex_unlock( &mut_shashmap );
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
void
shashmap<obj_type, key_type_, hash_type, alloc_type>::add_elem_insecure(obj_type t_obj, key_type_ t_key)
{
  (*this)[t_key] = t_obj;
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
obj_type
shashmap<obj_type, key_type_, hash_type, alloc_type>::get_set_elem(obj_type t_obj, key_type_ t_key)
{
  pthread_mutex_lock( &mut_shashmap );
  obj_type t_ret = hashmap<obj_type, key_type_, hash_type, alloc_type>::get_set_elem(t_obj, t_key);
  pthread_mutex_unlock( &mut_shashmap );
  return t_ret;
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
obj_type
shashmap<obj_type, key_type_, hash_type, alloc_type>::get_or_callback_set
(obj_type (*func)(void*), void* p_void, key_type_ t_key)
{
  pthread_mutex_lock( &mut_shashmap );
  obj_type t_ret = hashmap<obj_type, key_type_, hash_type, alloc_type>::get_or_callback_set
                   (func, p_void, t_key);
  pthread_mutex_unlock( &mut_shashmap );
  return t_ret;
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
void
shashmap<obj_type, key_type_, hash_type, alloc_type>::set_elem(obj_type t_obj, key_type_ t_key)
{
  pthread_mutex_lock( &mut_shashmap );
  (*this)[t_key] = t_obj;
  pthread_mutex_unlock( &mut_shashmap );
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
obj_type
shashmap<obj_type, key_type_, hash_type, alloc_type>::get_elem(key_type_ t_key)
{
  pthread_mutex_lock( &mut_shashmap );
  obj_type t_ret = hashmap<obj_type, key_type_, hash_type, alloc_type>::get_elem(t_key);
  pthread_mutex_unlock( &mut_shashmap );
  return t_ret;
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
void
shashmap<obj_type, key_type_, hash_type, alloc_type>::del_elem(key_type_ t_key)
{
  pthread_mutex_lock( &mut_shashmap );
  hashmap<obj_type, key_type_, hash_type, alloc_type>::erase(t_key);
  pthread_mutex_unlock( &mut_shashmap );
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
void
shashmap<obj_type, key_type_, hash_type, alloc_type>::del_elem_insecure(key_type_ t_key)
{
  hashmap<obj_type, key_type_, hash_type, alloc_type>::erase(t_key);
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
vector<key_type_>*
shashmap<obj_type, key_type_, hash_type, alloc_type>::get_key_vector()
{
  pthread_mutex_lock( &mut_shashmap );
  vector<key_type_>* p_vec = hashmap<obj_type, key_type_, hash_type, alloc_type>::get_key_vector();
  pthread_mutex_unlock( &mut_shashmap );
  return p_vec;
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
void
shashmap<obj_type, key_type_, hash_type, alloc_type>::clear()
{
  pthread_mutex_lock( &mut_shashmap );
  hashmap<obj_type, key_type_, hash_type, alloc_type>::clear();
  pthread_mutex_unlock( &mut_shashmap );
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
int
shashmap<obj_type, key_type_, hash_type, alloc_type>::size()
{
  pthread_mutex_lock( &mut_shashmap );
  int i_size = hashmap<obj_type, key_type_, hash_type, alloc_type>::size();
  pthread_mutex_unlock( &mut_shashmap );
  return i_size;
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
bool
shashmap<obj_type, key_type_, hash_type, alloc_type>::exists(key_type_ t_key)
{
  pthread_mutex_lock( &mut_shashmap );
  bool b_ret = hashmap<obj_type, key_type_, hash_type, alloc_type>::exists(t_key);
  pthread_mutex_unlock( &mut_shashmap );
  return b_ret;
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
void
shashmap<obj_type, key_type_, hash_type, alloc_type>::run_func( void (*func)(obj_type) )
{
  pthread_mutex_lock( &mut_shashmap );
  hashmap<obj_type, key_type_, hash_type, alloc_type>::run_func(func);
  pthread_mutex_unlock( &mut_shashmap );
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
void
shashmap<obj_type, key_type_, hash_type, alloc_type>::run_func( void (*func)(obj_type, void*), void* v_arg )
{
  pthread_mutex_lock( &mut_shashmap );
  hashmap<obj_type, key_type_, hash_type, alloc_type>::run_func(func, v_arg);
  pthread_mutex_unlock( &mut_shashmap );
}

template<class obj_type, class key_type_, class hash_type, class alloc_type>
void
shashmap<obj_type, key_type_, hash_type, alloc_type>::dumpit()
{
  dumpable::add("[shashmap]");
  vector<key_type_>* p_vec = get_key_vector();

  typename vector<key_type_>::iterator iter;
  for (iter = p_vec->begin(); iter != p_vec->end(); ++iter)
    dumpable::add(*iter);

  delete p_vec;
}
